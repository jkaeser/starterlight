<?php
/**
 * @file
 * Functions to support theming in the starterlight theme.
 */

use Drupal\Component\Utility\Html;

/**
 * Implements template_preprocess_html().
 */
function starterlight_preprocess_html(&$variables, $hook) {
  // Add variables and paths needed for HTML5 and responsive support.
  $variables['base_path'] = base_path();
  $variables['path_to_starterlight'] = drupal_get_path('theme','starterlight');
  $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();

  // Add a class that tells us whether the page is viewed by an authenticated user or not.
  $variables['attributes']['class'][] = $variables['logged_in'] ? 'logged-in' : 'not-logged-in';

  // Add classes for basic layouts.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }
}

/**
 * Implements template_preprocess_block().
 */
function starterlight_preprocess_block(&$vars) {
  $provider = $vars['configuration']['provider'];
  $plugin_id = $vars['plugin_id'];
  $classes = [
    'block',
    'block-' . $provider,
    'block-' . $plugin_id,
  ];
  foreach($classes as $class) {
    $vars['attributes']['class'][] = Html::cleanCssIdentifier($class);
  }

  $title_classes = [
    'block__label',
    'block-' . $provider . '__title',
    'block-' . $plugin_id . '__title',
  ];
  foreach($title_classes as $class) {
    $vars['title_attributes']['class'][] = Html::cleanCssIdentifier($class);
  }

  $content_classes = [
    'block__content',
    'block-' . $provider . '__content',
    'block-' . $plugin_id . '__content',
  ];
  foreach($content_classes as $class) {
    $vars['content_attributes']['class'][] = Html::cleanCssIdentifier($class);
  }
}

/**
 * Implements template_preprocess_node().
 */
function starterlight_preprocess_node(&$vars) {
  $view_mode = $vars['elements']['#view_mode'];
  $node = $vars['elements']['#node'];
  $bundle = $node->bundle();

  $attributes = [
    'attributes' => [
      'node',
      'node--type-' . $bundle,
      'node--view-mode-' . $view_mode,
      $node->isPromoted() ? 'node--promoted' : '',
      $node->isSticky() ? 'node--sticky' : '',
      !$node->isPublished() ? 'node--unpublished' : '',
    ],
    'title_attributes' => [
      'node__title',
      'node--type-' . $bundle . '__title',
    ],
    'content_attributes' => [
      'node__content',
      'node--type-' . $bundle . '__content',
    ],
  ];
  foreach($attributes as $attribute => $classlist) {
    foreach($classlist as $class) {
      $vars[$attribute]['class'][] = Html::cleanCssIdentifier($class);
    }
  }

  $author_classes = [
    'node__author',
    'node--type-' . $bundle . '__author',
  ];
  foreach($author_classes as $class) {
    $vars['author_attributes']->addClass(Html::cleanCssIdentifier($class));
  }
}

function starterlight_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
}
